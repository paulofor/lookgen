# Styler‚ÄëService ‚Äì Codex‚ÄëReady Spec (MVP)

<!--
Esta vers√£o √© otimizada para ser usada como "contexto" pelo OpenAI Codex/Copilot.  
üëâ¬†Sem tabelas HTML, diagramas ou formata√ß√£o muito pesada.  
üëâ¬†Cada se√ß√£o come√ßa com `##` ou `###`.  
üëâ¬†Tudo em texto puro ou blocos markdown de c√≥digo.  
üëâ¬†Termos‚Äëchave aparecem em **CAPS** para facilitar busca.
-->

## META

* VERSION: `0.2` ‚Äî 2025‚Äë06‚Äë20
* PURPOSE: Micro‚Äëservi√ßo que, periodicamente, pega 5 FOTOS do usu√°rio, usa **GPT‚Äë4o‚Äëmini** para gerar um PROMPT e o envia ao **DALL‚ÄëE 3** para criar uma IMAGEM de combina√ß√£o.
* SCALE: volume ‚âà¬†<100 sketches/dia ‚áí **SEM Redis / SEM Streaming**.

---

## TECH STACK

* **Spring Boot¬†3.3**¬†(MVC) ‚Äî Kotlin¬†1.9
* **PostgreSQL¬†15** ‚Äî tabelas `user`, `photo`, `sketch`
* **OpenAI Chat API** (`gpt-4o-mini`, `stream=false`)
* Container: `ghcr.io/lookgen/styler:<sha>`
* Deploy inicial: **1¬†pod** (2¬†vCPU,¬†1¬†Gi)

---

## DATA MODEL (PostgreSQL)

```
USER(id PK BIGINT, stage ENUM, retry_count SMALLINT, updated_at TIMESTAMP)
PHOTO(id PK, user_id FK, url TEXT, ord SMALLINT)
SKETCH(id PK, user_id FK UNIQUE, content TEXT, tokens INT, created_at TIMESTAMP)
```

* STAGE values: `CAPTURED` ‚Üí `PENDING_SKETCH` ‚Üí `SKETCH_READY` ‚Üî `SKETCH_ERROR`.

---

## PUBLIC API

```
GET  /actuator/health          # liveness / readiness
GET  /v1/sketch/{uid}          # returns {content, tokens}
POST /v1/admin/replay          # admin: reset stage & reprocess
```

* Frontend faz **poll** em `/v1/sketch/{uid}` at√© 200¬†OK.

---

## SCHEDULER LOGIC (pseudocode)

```kotlin
@Scheduled(fixedDelay = 60_000)
@Transactional
fun tick() {
  val users = userRepo.findPending(limit = 5) // SELECT ... FOR UPDATE SKIP LOCKED
  users.forEach { u ->
    processUser(u)
  }
}

fun processUser(u: User) {
  val photos = photoRepo.findByUser(u.id)      // must be 5
  if (photos.size != 5) { fail(u) }

  val sketch = openAi.createLookImage(photos.urls)
  sketchRepo.save(sketch)
  u.stage = Stage.SKETCH_READY
}
```

* **Retry:** at√© 3 tentativas (expo backoff). Se falha ‚áí `u.stage = SKETCH_ERROR`.

---

## OPENAI FLOW

1Ô∏è‚É£ `POST /v1/chat/completions`

```jsonc
{
  "model": "gpt-4o-mini",
  "stream": false,
  "messages": [
    {"role":"system","content":"Voc√™ √© um estilista ‚Ä¶"},
    {"role":"user","content":[
      {"type":"text","text":"Gere um prompt curto para DALL-E:"},
      {"type":"image_url","image_url":{"url":"${url1}"}},
      {"type":"image_url","image_url":{"url":"${url2}"}},
      {"type":"image_url","image_url":{"url":"${url3}"}},
      {"type":"image_url","image_url":{"url":"${url4}"}},
      {"type":"image_url","image_url":{"url":"${url5}"}},
      {"type":"text","text":"Descreva uma combina√ß√£o das pe√ßas em estilo de desenho."},
      {"type":"text","text":"Responda apenas com o prompt."}
    ]}
  ]
}
```

2Ô∏è‚É£ `POST /v1/images/generations`

```jsonc
{
  "model": "dall-e-3",
  "prompt": "${prompt}" ,
  "n": 1,
  "size": "1024x1024"
}
```

---

## CONFIG (application.yaml ‚Äì excerto)

```yaml
styler:
  poll-ms: 60000   # 60¬†s
openai:
  api-key: ${OPENAI_API_KEY}
  read-timeout: 120s
```

---

## METRICS (Micrometer)

* `sketch_jobs_total{state="done|error"}`
* `sketch_latency_seconds` (Timer)
* `openai_requests_total{status}`
* `openai_token_usage_total{type}`

---

## DONE CRITERIA (MVP)

* Migrations Flyway ‚úÖ
* Scheduler gravando esbo√ßo ‚úÖ
* Endpoint GET `/v1/sketch/{uid}` ‚úÖ
* Dockerfile & Helm chart ‚úÖ
* Grafana dashboard b√°sico ‚úÖ

<!-- EOF Codex‚Äëready spec -->
